import React from "react";
import type { Material } from "./types";
import DarkModeToggle from "./components/DarkModeToggle";
import ShareBanner from "./components/ShareBanner";
import StatsHeader from "./components/StatsHeader";
import FilterBar from "./components/FilterBar";
import MaterialsTable from "./components/MaterialsTable";
// import AltRecsPanel from './components/AltRecsPanel'; // optional

async function loadMaterials(): Promise<Material[]> {
  // Prefer /public/data; fall back to module-relative
  try {
    const r = await fetch("/data/materials.json", { cache: "no-store" });
    if (r.ok) return (await r.json()) as Material[];
  } catch {}
  const url = new URL("./data/materials.json", import.meta.url);
  const r2 = await fetch(url);
  return (await r2.json()) as Material[];
}

function computeStats(items: Material[]) {
  const total = items.length;
  const avgLifespan = total
    ? items.reduce(
        (s, m) => s + (Number.isFinite(m.lifespan) ? m.lifespan : 0),
        0,
      ) / total
    : 0;

  // top category
  const freq = new Map<string, number>();
  for (const m of items) freq.set(m.category, (freq.get(m.category) || 0) + 1);
  let topCategory = "";
  let topN = 0;
  for (const [k, v] of freq)
    if (v > topN) {
      topCategory = k;
      topN = v;
    }

  // sustainability score ~ recyclability quality
  const scoreMap: Record<string, number> = { high: 90, medium: 60, low: 35 };
  const score = total
    ? items.reduce(
        (s, m) => s + (scoreMap[m.recyclability?.toLowerCase()] ?? 55),
        0,
      ) / total
    : 0;

  return {
    totalMaterials: total,
    avgLifespan,
    topCategory,
    sustainabilityScore: Math.max(0, Math.min(100, score)),
  };
}

export default function App() {
  const [all, setAll] = React.useState<Material[]>([]);
  const [materials, setMaterials] = React.useState<Material[]>([]);
  const [search, setSearch] = React.useState("");
  const [category, setCategory] = React.useState("");
  const [subtype, setSubtype] = React.useState("");

  React.useEffect(() => {
    loadMaterials().then((data) => {
      setAll(data);
      setMaterials(data);
    });
  }, []);

  // derive category/subtype lists from ALL items
  const categories = React.useMemo(
    () => Array.from(new Set(all.map((m) => m.category))).sort(),
    [all],
  );
  const subtypes = React.useMemo(
    () =>
      Array.from(
        new Set(
          all
            .filter((m) => !category || m.category === category)
            .map((m) => m.subtype),
        ),
      ).sort(),
    [all, category],
  );

  // filter on controls
  React.useEffect(() => {
    const q = search.trim().toLowerCase();
    const next = all.filter((m) => {
      const textOk =
        !q ||
        m.name.toLowerCase().includes(q) ||
        m.category.toLowerCase().includes(q) ||
        m.subtype.toLowerCase().includes(q);
      const catOk = !category || m.category === category;
      const subOk = !subtype || m.subtype === subtype;
      return textOk && catOk && subOk;
    });
    setMaterials(next);
  }, [all, search, category, subtype]);

  // share/export/print
  const onShare = React.useCallback(async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      alert("Link copied to clipboard.");
    } catch {
      alert("Copy failed. You can copy the address bar URL.");
    }
  }, []);

  const onExport = React.useCallback(() => {
    const header = [
      "id",
      "name",
      "category",
      "subtype",
      "lifespan",
      "carbonFootprint",
      "recyclability",
      "cost",
    ];
    const rows = materials.map((m) => [
      m.id,
      m.name,
      m.category,
      m.subtype,
      m.lifespan,
      m.carbonFootprint,
      m.recyclability,
      m.cost,
    ]);
    const csv = [header, ...rows]
      .map((r) =>
        r
          .map((v) =>
            typeof v === "string" && v.includes(",")
              ? `"${v.replace(/"/g, '""')}"`
              : String(v),
          )
          .join(","),
      )
      .join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "materials.csv";
    a.click();
    URL.revokeObjectURL(url);
  }, [materials]);

  const onPrint = React.useCallback(() => window.print(), []);

  const stats = computeStats(materials);

  return (
    <div className="min-h-screen p-4">
      {/* Header */}
      <header className="flex items-center justify-between gap-3 mb-4">
        <h1 className="text-2xl font-bold">BlockPlane Tailwind OK</h1>
        <div className="flex items-center gap-2">
          <DarkModeToggle />
          <nav className="hidden sm:flex gap-3 text-sm">
            <a href="#materials" className="underline">
              Materials
            </a>
            <a href="#analytics" className="underline">
              Analytics
            </a>
            <a href="#insights" className="underline">
              Insights
            </a>
          </nav>
        </div>
      </header>

      {/* Share/Export/Print */}
      <ShareBanner onShare={onShare} onExport={onExport} onPrint={onPrint} />

      {/* KPIs */}
      <StatsHeader
        totalMaterials={stats.totalMaterials}
        avgLifespan={stats.avgLifespan}
        topCategory={stats.topCategory}
        sustainabilityScore={stats.sustainabilityScore}
      />

      {/* Filters */}
      <FilterBar
        search={search}
        onSearch={setSearch}
        category={category}
        onCategory={(v) => {
          setCategory(v);
          setSubtype("");
        }}
        subtype={subtype}
        onSubtype={setSubtype}
        categories={categories}
        subtypes={subtypes}
        filteredCount={materials.length}
        totalCount={all.length}
      />

      {/* Content */}
      <section id="materials" className="mt-4">
        <MaterialsTable materials={materials} />
      </section>

      {/* Optional: Alternatives panel
      <section className="mt-4">
        <AltRecsPanel alternatives={[]} selectedMaterial={materials[0]?.name} />
      </section>
      */}

      {/* Print footer */}
      <footer className="hidden print:block mt-12 pt-6 border-t border-gray-200 text-center text-xs text-gray-500">
        Generated on {new Date().toLocaleDateString()}
      </footer>
    </div>
  );
}
