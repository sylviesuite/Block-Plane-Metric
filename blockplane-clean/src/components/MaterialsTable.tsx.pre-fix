import React, { useMemo } from 'react';
import Card from './ui/Card';
import SectionHeader from './ui/SectionHeader';

export interface Material {
  id: string;
  name: string;
  category: string;
  subtype: string;
  lifespan?: number | null;
  carbonFootprint?: number | null; // kg CO2e
  recyclability?: string | null;   // "high" | "medium" | "low" | unknown
  cost?: number | null;            // USD per unit
}

export interface MaterialsTableProps {
  materials: Material[];
  sortField?: string;
  sortDirection?: 'asc' | 'desc';
  onSort?: (field: string) => void;
}

/** ---- helpers ---- */
const fmtNumber = (n: number | null | undefined, digits = 0) =>
  typeof n === 'number' && Number.isFinite(n) ? n.toFixed(digits) : '—';

const fmtCurrency = (n: number | null | undefined) =>
  typeof n === 'number' && Number.isFinite(n)
    ? n.toLocaleString(undefined, { style: 'currency', currency: 'USD', maximumFractionDigits: 2 })
    : '—';

const getRecyclabilityColor = (recyclability?: string | null) => {
  const _materials = Array.isArray(materials) ? materials : [];   // NOTE: If you still reference `materials` below, replace with `_materials`
  switch (recyclability?.toLowerCase()) {
    case 'high':
      return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
    case 'medium':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
    case 'low':
      return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
  }
};

const MaterialsTable: React.FC<MaterialsTableProps> = ({
  materials,
  sortField,
  sortDirection,
  onSort
}) => {
  const SortableHeader: React.FC<{ field: string; children: React.ReactNode }> = ({
    field,
    children
  }) => {
    const isSorted = sortField === field;
    const isAsc = isSorted && sortDirection === 'asc';
    return (
      <th
        scope="col"
        className="sticky top-0 bg-gray-50 dark:bg-zinc-800 px-3 py-3 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400 cursor-pointer hover:bg-gray-100 dark:hover:bg-zinc-700 focus:outline-none focus:bg-gray-100 dark:focus:bg-zinc-700"
        onClick={() => onSort?.(field)}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            onSort?.(field);
          }
        }}
        tabIndex={0}
        aria-sort={isSorted ? (isAsc ? 'ascending' : 'descending') : 'none'}
      >
        <div className="flex items-center space-x-1">
          <span>{children}</span>
          {onSort && (
            <span className="flex-shrink-0" aria-hidden="true">
              {isSorted ? (
                isAsc ? (
                  <svg className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path
                      fillRule="evenodd"
                      d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                ) : (
                  <svg className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path
                      fillRule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                )
              ) : (
                <svg className="h-4 w-4 text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" />
                </svg>
              )}
            </span>
          )}
        </div>
      </th>
    );
  };

  const ariaSortLive = useMemo(() => {
    if (!sortField || !sortDirection) return 'Not sorted';
    return `Sorted by ${sortField}, ${sortDirection === 'asc' ? 'ascending' : 'descending'}`;
  }, [sortField, sortDirection]);

  return (
    <Card noPadding className="print:break-inside-avoid">
      <div className="px-4 py-3 border-b border-gray-200 dark:border-white/10">
        <SectionHeader className="mb-0">Materials Database</SectionHeader>
      </div>

      <div className="overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-white/10" role="table">
            <caption className="sr-only">
              Materials database with {safeMaterials.length} items. Table can be sorted by clicking column headers.
            </caption>

            <thead>
              <tr>
                <SortableHeader field="name">Material Name</SortableHeader>
                <SortableHeader field="category">Category</SortableHeader>
                <SortableHeader field="subtype">Subtype</SortableHeader>
                <SortableHeader field="lifespan">Lifespan (years)</SortableHeader>
                <SortableHeader field="carbonFootprint">Carbon (kg CO₂)</SortableHeader>
                <SortableHeader field="recyclability">Recyclability</SortableHeader>
                <SortableHeader field="cost">Cost ($/unit)</SortableHeader>
              </tr>
            </thead>

            <tbody className="divide-y divide-gray-200 dark:divide-white/10 bg-white dark:bg-zinc-900">
              {safeMaterials.length === 0 ? (
                <tr>
                  <td colSpan={7} className="px-3 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                    <div className="flex flex-col items-center space-y-2">
                      <svg className="h-8 w-8 text-gray-300 dark:text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      <p>No materials found matching your criteria</p>
                      <p className="text-xs">Try adjusting your filters or search terms</p>
                    </div>
                  </td>
                </tr>
              ) : (
                safeMaterials.map((m, index) => (
                  <tr
                    key={m.id}
                    className={`hover:bg-gray-50 dark:hover:bg-white/5 focus-within:bg-gray-50 dark:focus-within:bg-white/5 ${
                      index % 2 === 0 ? 'bg-white dark:bg-zinc-900' : 'bg-gray-50/50 dark:bg-zinc-800/50'
                    }`}
                  >
                    <td className="px-3 py-3 text-sm font-medium text-gray-900 dark:text-white print:text-xs">
                      {m.name}
                    </td>
                    <td className="px-3 py-3 text-sm text-gray-600 dark:text-gray-300 print:text-xs">
                      {m.category}
                    </td>
                    <td className="px-3 py-3 text-sm text-gray-600 dark:text-gray-300 print:text-xs">
                      {m.subtype}
                    </td>
                    <td className="px-3 py-3 text-sm text-gray-600 dark:text-gray-300 print:text-xs">
                      {fmtNumber(m.lifespan)}
                    </td>
                    <td className="px-3 py-3 text-sm text-gray-600 dark:text-gray-300 print:text-xs">
                      {fmtNumber(m.carbonFootprint, 2)}
                    </td>
                    <td className="px-3 py-3 print:text-xs">
                      <span
                        className={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${getRecyclabilityColor(
                          m.recyclability
                        )}`}
                        title={`Recyclability: ${m.recyclability ?? 'Unknown'}`}
                      >
                        {m.recyclability ?? 'Unknown'}
                      </span>
                    </td>
                    <td className="px-3 py-3 text-sm text-gray-600 dark:text-gray-300 print:text-xs">
                      {fmtCurrency(m.cost)}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>

          {/* SR-only live region for sort announcements */}
          <div className="sr-only" aria-live="polite">
            {ariaSortLive}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MaterialsTable;
